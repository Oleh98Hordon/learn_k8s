apiVersion: v1
kind: Service
metadata:
  name: wordpress-mysql
  labels:
    app: wordpress
spec:
  ports:
    - port: 3306
  selector:
    app: wordpress
    tier: mysql
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: mysql-pv-claim
  labels:
    app: wordpress
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 20Gi
---
apiVersion: apps/v1 
kind: Deployment
metadata:
  name: wordpress-mysql
  labels:
    app: wordpress
spec:
  selector:
    matchLabels:
      app: wordpress
      tier: mysql
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        app: wordpress
        tier: mysql
    spec:
      containers:
      - image: mysql:5.6
        name: mysql
        env:
        - name: MYSQL_ROOT_PASSWORD
          value: password
#          valueFrom:
#             secretKeyRef:
#                 name: mysql-secret
#                 key: mysql-root-password 
        readinessProbe:
          tcpSocket:
            port: 3306
          failureThreshold: 2
          initialDelaySeconds: 10
          periodSeconds: 15
        livenessProbe: #С этой конфигурацией kubelet будет пытаться открыть сокет к вашему контейнеру на определённый порт. 
          tcpSocket: # Если он сможет установить соединение, контейнер будет считаться здоровым, если нет, будет считаться заваленным.
            port: 3306
          initialDelaySeconds: 15
          periodSeconds: 20
        resources: # використовується для контролю ресурсів в кластері
          requests: # резервуємо певну кількість ресурсів для запуску нашої апки
             cpu: 50m
             memory: 100Mi
          limits:
             cpu: 100m #повне cpu = 1000m
             memory: 100Mi
        ports:
        - containerPort: 3306
          name: mysql
        volumeMounts:
        - name: mysql-persistent-storage
          mountPath: /var/lib/mysql
      volumes:
      - name: mysql-persistent-storage
        persistentVolumeClaim:
          claimName: mysql-pv-claim
